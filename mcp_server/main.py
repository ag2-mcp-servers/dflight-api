# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T04:23:42+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import Header

from models import (
    AerodromeDistanceResponse,
    AerodromePolyResponse,
    AerodromeRouteResponse,
    AerodromesByDistance,
    AerodromesByPolygon,
    AerodromesByRoute,
    AirspaceByDistance,
    AirspaceByPolygon,
    AirspaceByRoute,
    AirspaceDistanceResponse,
    AirspacePolyResponse,
    AirspaceRouteResponse,
    HTTPValidationError,
    NOTAMsByDistance,
    NOTAMsByPolygon,
    NOTAMsByRoute,
    NOTAMsDistanceResponse,
    NOTAMsPolyResponse,
    NOTAMsRouteResponse,
    ObstacleDistanceResponse,
    ObstaclePolyResponse,
    ObstacleRouteResponse,
    ObstaclesByDistance,
    ObstaclesByPolygon,
    ObstaclesByRoute,
    SSAByDistance,
    SSAByPolygon,
    SSAByRoute,
    SSADistanceResponse,
    SSAPolyResponse,
    SSARouteResponse,
    UOAsByDistance,
    UOAsByPolygon,
    UOAsByRoute,
    UOAsDistanceResponse,
    UOAsPolyResponse,
    UOAsRouteResponse,
    VenueDistanceResponse,
    VenuePolyResponse,
    VenueRouteResponse,
    VenuesByDistance,
    VenuesByPolygon,
    VenuesByRoute,
    WxByDistance,
    WxByPolygon,
    WxByRoute,
    WxDistanceResponse,
    WxPolyResponse,
    WxRouteResponse,
)

app = MCPProxy(
    description='[DFlight API](https://ljaero.com/solutions/dflight/) supplies the up-to-date information needed for compliance with UAV preflight assessment requirements. Separate endpoints are available for each of the following information categories:\n- Airspace\n- Weather\n- Temporary Flight Restrictions\n- Special Security Areas\n- Restricted Public Venues\n- Surface Obstacles\n- Aerodromes\n- UAS Operating Areas\n\nYou can define your geographic area of interest in one of three convenient ways:\n- Providing a latitude/longitude point and distance around that point\n- Providing a GeoJSON LineString defining your route\n- Providing an arbitrary GeoJSON Polygon defining your area of interest',
    title='DFlight API',
    version='V 1.0.0',
    servers=[{'description': 'DFlight API', 'url': 'https://dflight-api.ljaero.com/'}],
)


@app.post(
    '/us/v1/aerodromes/distance-query',
    description=""" Retrieve aerodromes within given distance of a point. Request body parameters are:
* latitude:  WGS84 latitude coordinate of your selected point, in decimal degrees
* longitude:  WGS84 longitude coordinate of your selected point, in decimal degrees
* distance:  distance in meters (max allowed value is 25000)

Successful requests return a GeoJSON FeatureCollection, with a separate Feature for each
Aerodrome found. All Features will include properties for the facility name, ident,
type, and operational status. """,
    tags=['aerodrome_info_queries', 'airspace_info_queries'],
)
def aerodromes_by_distance_us_v1_aerodromes_distance_query_post(
    x_api_key: Optional[str] = Header(None, alias='x-api-key'),
    body: AerodromesByDistance = ...,
):
    """
    Retrieve aerodromes within given distance of location.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/us/v1/aerodromes/polygon-query',
    description=""" Retrieve aerodromes located within given area. Request body parameters are:
* poly:  [GeoJSON Polygon](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the area. Max allowed area is 1000 km^2.

Successful requests return a GeoJSON FeatureCollection, with a separate Feature for each
Aerodrome found. All Features will include properties for the facility name, ident,
type, and operational status. """,
    tags=['aerodrome_info_queries'],
)
def aerodromes_by_poly_us_v1_aerodromes_polygon_query_post(
    x_api_key: Optional[str] = Header(None, alias='x-api-key'),
    body: AerodromesByPolygon = ...,
):
    """
    Retrieve aerodromes located within given area.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/us/v1/aerodromes/route-query',
    description=""" Retrieve aerodromes found along a route. Request body parameters are:
* route: [GeoJSON Linestring](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the route. Max allowed length is 50 km.

Successful requests return a GeoJSON FeatureCollection, with a separate Feature for each
Aerodrome found. All Features will include properties for the facility name, ident,
type, and operational status. """,
    tags=['aerodrome_info_queries'],
)
def aerodromes_by_route_us_v1_aerodromes_route_query_post(
    x_api_key: Optional[str] = Header(None, alias='x-api-key'),
    body: AerodromesByRoute = ...,
):
    """
    Retrieve aerodromes found along a route.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/us/v1/airspace/distance-query',
    description=""" Retrieve selected types of airspace existing within given distance from a point. Request body parameters are:
* latitude:  WGS84 latitude coordinate of your selected point, in decimal degrees
* longitude:  WGS84 longitude coordinate of your selected point, in decimal degrees
* distance:  distance in meters (max allowed value is 25000)
* asptypes:  list of one or more airspace types you wish to retrieve. Allowed values are 'CAS', 'SUA', 'MAA', and 'MTR'.

Successful requests return a list of GeoJSON FeatureCollections, one for each Airspace type indicated in the request. Within each feature collection, there will be a separate Feature for each Airspace instance found. All Features will include a property indicating the *airspace_type*. Additional properties for each *airspace_type* are as follows:
* CAS (Controlled Airspace)
    - *name*
    - *cas_class*: B, C, D, or E2
    - *floor*: integer value in ft MSL
    - *ceiling*: integer value in ft MSL
    - *lannc*: true/false indicating whether or not authorization for this airspace may be obtained via LAANC
* SUA (Special Use Airspace)
    - *name*
    - *sua_type*: AA = Alert Area, MOA = Military Operations Area, NSA = National Security Area, PA = Prohibited Area, RA = Restricted Area, WA = Warning Area
    - *floor*: lower limit of the airspace
    - *floor_uom*: unit of measure used for the numeric floor value: FT (feet) or FL (flight level)
    - *floor_ref*: reference level used for the numeric floor value: AGL, MSL, or STD (standard atmosphere, used for flight level values)
    - *ceiling*: upper limit of the airspace
    - *ceiling_uom*: unit of measure used for the numeric floor value: FT (feet) or FL (flight level)
    - *ceiling_ref*: reference level used for the numeric ceiling value: AGL, MSL, or STD (standard atmosphere, used for flight level values)
* MAA (Miscellaneous Activity Area)
    - *name*
    - *maa_type*: one of the following - ULTRALIGHT, PARACHUTE JUMP AREA, AEROBATIC PRACTICE, GLIDER, HANG GLIDER, SPACE LAUNCH ACTIVITY
    - *use_times*: textual description of days/times when activity in the area should be expected
* MTR (Military Training Route)
    - *name*
    - *use_times*: textual description of days/times when MTR is active/hot
    - *terrain_following*: boolean value indicating whether terrain following activity occurs on the route
    - *max_extent_nm*: maximum distance that aircraft can deviate from route centerline """,
    tags=['airspace_info_queries'],
)
def asp_by_distance_us_v1_airspace_distance_query_post(
    x_api_key: Optional[str] = Header(None, alias='x-api-key'),
    body: AirspaceByDistance = ...,
):
    """
    Retrieve all requested types of airspace located within given distance of location.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/us/v1/airspace/polygon-query',
    description=""" Retrieve selected types of airspace located within given area. Request body parameters are:
* poly:  [GeoJSON Polygon](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the area. Max allowed area is 1000 km^2.
* asptypes:  list of one or more airspace types you wish to retrieve. Allowed values are 'CAS', 'SUA', 'MAA', and 'MTR'.

Successful requests return a list of GeoJSON FeatureCollections, one for each Airspace type indicated in the request. Within each feature collection, there will be a separate Feature for each Airspace instance found. All Features will include a property indicating the *airspace_type*. Additional properties for each *airspace_type* are as follows:
* CAS (Controlled Airspace)
    - *name*
    - *cas_class*: B, C, D, or E2
    - *floor*: integer value in ft MSL
    - *ceiling*: integer value in ft MSL
    - *lannc*: true/false indicating whether or not authorization for this airspace may be obtained via LAANC
* SUA (Special Use Airspace)
    - *name*
    - *sua_type*: AA = Alert Area, MOA = Military Operations Area, NSA = National Security Area, PA = Prohibited Area, RA = Restricted Area, WA = Warning Area
    - *floor*: lower limit of the airspace
    - *floor_uom*: unit of measure used for the numeric floor value: FT (feet) or FL (flight level)
    - *floor_ref*: reference level used for the numeric floor value: AGL, MSL, or STD (standard atmosphere, used for flight level values)
    - *ceiling*: upper limit of the airspace
    - *ceiling_uom*: unit of measure used for the numeric floor value: FT (feet) or FL (flight level)
    - *ceiling_ref*: reference level used for the numeric ceiling value: AGL, MSL, or STD (standard atmosphere, used for flight level values)
* MAA (Miscellaneous Activity Area)
    - *name*
    - *maa_type*: one of the following - ULTRALIGHT, PARACHUTE JUMP AREA, AEROBATIC PRACTICE, GLIDER, HANG GLIDER, SPACE LAUNCH ACTIVITY
    - *use_times*: textual description of days/times when activity in the area should be expected
* MTR (Military Training Route)
    - *name*
    - *use_times*: textual description of days/times when MTR is active/hot
    - *terrain_following*: boolean value indicating whether terrain following activity occurs on the route
    - *max_extent_nm*: maximum distance that aircraft can deviate from route centerline """,
    tags=['airspace_info_queries'],
)
def asp_by_poly_us_v1_airspace_polygon_query_post(
    x_api_key: Optional[str] = Header(None, alias='x-api-key'),
    body: AirspaceByPolygon = ...,
):
    """
    Retrieve all requested types of airspace located within given GeoJSON Polygon.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/us/v1/airspace/route-query',
    description=""" Retrieve selected types of airspace traversed by route. Request body parameters are:
* route:  [GeoJSON Linestring](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the route. Max allowed length is 50 km.
* asptypes:  list of one or more airspace types you wish to retrieve. Allowed values are 'CAS', 'SUA', 'MAA', and 'MTR'.

Successful requests return a list of GeoJSON FeatureCollections, one for each Airspace type indicated in the request. Within each feature collection, there will be a separate Feature for each Airspace instance found. All Features will include a property indicating the *airspace_type*. Additional properties for each *airspace_type* are as follows:
* CAS (Controlled Airspace)
    - *name*
    - *cas_class*: B, C, D, or E2
    - *floor*: integer value in ft MSL
    - *ceiling*: integer value in ft MSL
    - *lannc*: true/false indicating whether or not authorization for this airspace may be obtained via LAANC
* SUA (Special Use Airspace)
    - *name*
    - *sua_type*: AA = Alert Area, MOA = Military Operations Area, NSA = National Security Area, PA = Prohibited Area, RA = Restricted Area, WA = Warning Area
    - *floor*: lower limit of the airspace
    - *floor_uom*: unit of measure used for the numeric floor value: FT (feet) or FL (flight level)
    - *floor_ref*: reference level used for the numeric floor value: AGL, MSL, or STD (standard atmosphere, used for flight level values)
    - *ceiling*: upper limit of the airspace
    - *ceiling_uom*: unit of measure used for the numeric floor value: FT (feet) or FL (flight level)
    - *ceiling_ref*: reference level used for the numeric ceiling value: AGL, MSL, or STD (standard atmosphere, used for flight level values)
* MAA (Miscellaneous Activity Area)
    - *name*
    - *maa_type*: one of the following - ULTRALIGHT, PARACHUTE JUMP AREA, AEROBATIC PRACTICE, GLIDER, HANG GLIDER, SPACE LAUNCH ACTIVITY
    - *use_times*: textual description of days/times when activity in the area should be expected
* MTR (Military Training Route)
    - *name*
    - *use_times*: textual description of days/times when MTR is active/hot
    - *terrain_following*: boolean value indicating whether terrain following activity occurs on the route
    - *max_extent_nm*: maximum distance that aircraft can deviate from route centerline """,
    tags=['airspace_info_queries'],
)
def asp_by_route_us_v1_airspace_route_query_post(
    x_api_key: Optional[str] = Header(None, alias='x-api-key'),
    body: AirspaceByRoute = ...,
):
    """
    Retrieve all requested types of airspace traversed by route.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/us/v1/obstacles/distance-query',
    description=""" Retrieve obstacles within given distance of a point. Request body parameters are:
* latitude:  WGS84 latitude coordinate of your selected point, in decimal degrees
* longitude:  WGS84 longitude coordinate of your selected point, in decimal degrees
* distance:  distance in meters (max allowed value is 25000) """,
    tags=['obstacle_info_queries'],
)
def obstacles_by_distance_us_v1_obstacles_distance_query_post(
    x_api_key: Optional[str] = Header(None, alias='x-api-key'),
    body: ObstaclesByDistance = ...,
):
    """
    Retrieve obstacles within given distance of location.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/us/v1/obstacles/polygon-query',
    description=""" Retrieve obstacles located within given area. Request body parameters are:
* poly:  [GeoJSON Polygon](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the area. Max allowed area is 1000 km^2. """,
    tags=['obstacle_info_queries'],
)
def obstacles_by_poly_us_v1_obstacles_polygon_query_post(
    x_api_key: Optional[str] = Header(None, alias='x-api-key'),
    body: ObstaclesByPolygon = ...,
):
    """
    Retrieve obstacles located within given area.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/us/v1/obstacles/route-query',
    description=""" Retrieve obstacles found along a route. Request body parameters are:
* route: [GeoJSON Linestring](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the route. Max allowed length is 50 km. """,
    tags=['obstacle_info_queries'],
)
def obstacles_by_route_us_v1_obstacles_route_query_post(
    x_api_key: Optional[str] = Header(None, alias='x-api-key'),
    body: ObstaclesByRoute = ...,
):
    """
    Retrieve obstacles found along a route.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/us/v1/restrictions/distance-query',
    description=""" Retrieve Flight Restrictions applicable within given distance of a point. Request body parameters are:
* latitude:  WGS84 latitude coordinate of your selected point, in decimal degrees
* longitude:  WGS84 longitude coordinate of your selected point, in decimal degrees
* distance:  distance in meters (max allowed value is 25000) """,
    tags=['flight_restriction_info_queries', 'airspace_info_queries'],
)
def tfr_by_distance_us_v1_restrictions_distance_query_post(
    x_api_key: Optional[str] = Header(None, alias='x-api-key'),
    body: NOTAMsByDistance = ...,
):
    """
    Retrieve flight restrictions applicable within given distance of location.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/us/v1/restrictions/polygon-query',
    description=""" Retrieve Flight Restrictions located within given area. Request body parameters are:
* poly:  [GeoJSON Polygon](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the area. Max allowed area is 1000 km^2. """,
    tags=['flight_restriction_info_queries', 'airspace_info_queries'],
)
def tfr_by_poly_us_v1_restrictions_polygon_query_post(
    x_api_key: Optional[str] = Header(None, alias='x-api-key'),
    body: NOTAMsByPolygon = ...,
):
    """
    Retrieve flight restrictions applicable within given area.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/us/v1/restrictions/route-query',
    description=""" Retrieve Flight Restrictions applicable along your route. Request body parameters are:
* route:  [GeoJSON Linestring](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the route. Max allowed length is 50 km. """,
    tags=['flight_restriction_info_queries', 'airspace_info_queries'],
)
def tfr_by_route_us_v1_restrictions_route_query_post(
    x_api_key: Optional[str] = Header(None, alias='x-api-key'),
    body: NOTAMsByRoute = ...,
):
    """
    Retrieve flight restrictions applicable along route.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/us/v1/ssa/distance-query',
    description=""" Retrieve special security areas existing within given distance from a point. Request body parameters are:
* latitude:  WGS84 latitude coordinate of your selected point, in decimal degrees
* longitude:  WGS84 longitude coordinate of your selected point, in decimal degrees
* distance:  distance in meters (max allowed value is 25000) """,
    tags=['security_area_info_queries', 'airspace_info_queries'],
)
def ssa_by_distance_us_v1_ssa_distance_query_post(
    x_api_key: Optional[str] = Header(None, alias='x-api-key'),
    body: SSAByDistance = ...,
):
    """
    Retrieve all special security areas located within given distance of location.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/us/v1/ssa/polygon-query',
    description=""" Retrieve all special security areas located within given area. Request body parameters are:
* poly:  [GeoJSON Polygon](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the area. Max allowed area is 1000 km^2. """,
    tags=['security_area_info_queries', 'airspace_info_queries'],
)
def ssa_by_poly_us_v1_ssa_polygon_query_post(
    x_api_key: Optional[str] = Header(None, alias='x-api-key'), body: SSAByPolygon = ...
):
    """
    Retrieve all special security areas located within given GeoJSON Polygon.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/us/v1/ssa/route-query',
    description=""" Retrieve all special security areas intersected by route. Request body parameters are:
* route: [GeoJSON Linestring](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the route. Max allowed length is 50 km. """,
    tags=['security_area_info_queries', 'flight_restriction_info_queries'],
)
def ssa_by_route_us_v1_ssa_route_query_post(
    x_api_key: Optional[str] = Header(None, alias='x-api-key'), body: SSAByRoute = ...
):
    """
    Retrieve all special security areas traversed by route.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/us/v1/uoa/distance-query',
    description=""" Retrieve UAS Operating Areas (UOAs) found within given distance of a point. Request body parameters are:
* latitude:  WGS84 latitude coordinate of your selected point, in decimal degrees
* longitude:  WGS84 longitude coordinate of your selected point, in decimal degrees
* distance:  distance in meters (max allowed value is 25000) """,
    tags=['uas_operating_area_info_queries', 'airspace_info_queries'],
)
def uoa_by_distance_us_v1_uoa_distance_query_post(
    x_api_key: Optional[str] = Header(None, alias='x-api-key'),
    body: UOAsByDistance = ...,
):
    """
    Retrieve UAS Operating Areas (UOAs) found within given distance of location.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/us/v1/uoa/polygon-query',
    description=""" Retrieve UAS Operating Areas (UOAs) found within given area. Request body parameters are:
* poly:  [GeoJSON Polygon](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the area. Max allowed area is 1000 km^2. """,
    tags=['uas_operating_area_info_queries'],
)
def uoa_by_poly_us_v1_uoa_polygon_query_post(
    x_api_key: Optional[str] = Header(None, alias='x-api-key'),
    body: UOAsByPolygon = ...,
):
    """
    Retrieve UAS Operating Areas (UOAs) found within given area.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/us/v1/uoa/route-query',
    description=""" Retrieve UAS Operating Areas (UOAs) found along your route. Request body parameters are:
* route:  [GeoJSON Linestring](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the route. Max allowed length is 50 km. """,
    tags=['uas_operating_area_info_queries'],
)
def uoa_by_route_us_v1_uoa_route_query_post(
    x_api_key: Optional[str] = Header(None, alias='x-api-key'), body: UOAsByRoute = ...
):
    """
    Retrieve UAS Operating Areas (UOAs) found along route.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/us/v1/venues/distance-query',
    description=""" Retrieve venues existing within given distance from a point. Request body parameters are:
* latitude:  WGS84 latitude coordinate of your selected point, in decimal degrees
* longitude:  WGS84 longitude coordinate of your selected point, in decimal degrees
* distance:  distance in meters (max allowed value is 25000) """,
    tags=['restricted_venue_info_queries'],
)
def ven_by_distance_us_v1_venues_distance_query_post(
    x_api_key: Optional[str] = Header(None, alias='x-api-key'),
    body: VenuesByDistance = ...,
):
    """
    Retrieve all restricted public venues located within given distance of location.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/us/v1/venues/polygon-query',
    description=""" Retrieve all restricted public venues located within given area. Request body parameters are:
* poly:  [GeoJSON Polygon](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the area. Max allowed area is 1000 km^2. """,
    tags=['restricted_venue_info_queries'],
)
def ven_by_poly_us_v1_venues_polygon_query_post(
    x_api_key: Optional[str] = Header(None, alias='x-api-key'),
    body: VenuesByPolygon = ...,
):
    """
    Retrieve all restricted public venues located within given GeoJSON Polygon.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/us/v1/venues/route-query',
    description=""" Retrieve all restricted public venues intersected by route. Request body parameters are:
* route: [GeoJSON Linestring](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the route. Max allowed length is 50 km. """,
    tags=['restricted_venue_info_queries', 'flight_restriction_info_queries'],
)
def ven_by_route_us_v1_venues_route_query_post(
    x_api_key: Optional[str] = Header(None, alias='x-api-key'),
    body: VenuesByRoute = ...,
):
    """
    Retrieve all restricted public venues traversed by route.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/us/v1/wx-forecast/distance-query',
    description=""" Retrieve forecast values for selected weather elements and time period. Request body parameters are:
* latitude:  WGS84 latitude coordinate of your selected point, in decimal degrees
* longitude:  WGS84 longitude coordinate of your selected point, in decimal degrees
* distance:  distance in meters (max allowed value is 25000)
* wxtypes:  list of one or more weather forecast elements you wish to retrieve. Allowed values are "CIG", "DEWPT", "SKY", "TEMP", "VIS", "WINDDIR", "WINDGUST", "WINDSPEED".
* hours:  number of hourly forecasts to return (1-24). For current hour only you should enter value of 1. To also retrieve values for each of the next n hours, enter n.


The response will consist of a GeoJSON FeatureCollection with one Feature for each forecast location found within requested area,
properties of which will include an ordered list of forecast values for each requested weather element, for each requested hour. Units for each element are as follows:
* CIG: meters AGL
* DEWPT: degrees Celsius
* SKY: % cloud cover
* TEMP: degrees Celsius
* VIS: meters
* WINDDIR: degrees true
* WINDGUST: meters/sec
* WINDSPEED: meters/sec """,
    tags=['weather_forecast_info_queries'],
)
def wx_by_distance_us_v1_wx_forecast_distance_query_post(
    x_api_key: Optional[str] = Header(None, alias='x-api-key'), body: WxByDistance = ...
):
    """
    Retrieve forecast values within given distance of location for all requested weather elements and time periods.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/us/v1/wx-forecast/polygon-query',
    description=""" Retrieve forecast values located within given area for requested weather elements and time period. Request body parameters are:
* poly:  [GeoJSON Polygon](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the area. Max allowed area is 1000 km^2.
* wxtypes:  list of one or more weather forecast elements you wish to retrieve. Allowed values are "CIG", "DEWPT", "SKY", "TEMP", "VIS", "WINDDIR", "WINDGUST", "WINDSPEED".
* hours:  number of hourly forecasts to return (1-24). For current hour only you should enter value of 1. To also retrieve values for each of the next n hours, enter n.


The response will consist of a GeoJSON FeatureCollection with one Feature for each forecast location found within requested area,
properties of which will include an ordered list of forecast values for each requested weather element, for each requested hour. Units for each element are as follows:
* CIG: meters AGL
* DEWPT: degrees Celsius
* SKY: % cloud cover
* TEMP: degrees Celsius
* VIS: meters
* WINDDIR: degrees true
* WINDGUST: meters/sec
* WINDSPEED: meters/sec """,
    tags=['weather_forecast_info_queries'],
)
def wx_by_poly_us_v1_wx_forecast_polygon_query_post(
    x_api_key: Optional[str] = Header(None, alias='x-api-key'), body: WxByPolygon = ...
):
    """
    Retrieve forecast values within given GeoJSON polygon for all requested weather elements and time periods.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/us/v1/wx-forecast/route-query',
    description=""" Retrieve forecast values along route for requested weather elements and time period. Request body parameters are:
* route:  [GeoJSON Linestring](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the route. Max allowed length is 50 km.
* wxtypes:  list of one or more weather forecast elements you wish to retrieve. Allowed values are "CIG", "DEWPT", "SKY", "TEMP", "VIS", "WINDDIR", "WINDGUST", "WINDSPEED".
* hours:  number of hourly forecasts to return (1-24). For current hour only you should enter value of 1. To also retrieve values for each of the next n hours, enter n.


The response will consist of a GeoJSON FeatureCollection with one Feature for each forecast location found within requested area,
properties of which will include an ordered list of forecast values for each requested weather element, for each requested hour. Units for each element are as follows:
* CIG: meters AGL
* DEWPT: degrees Celsius
* SKY: % cloud cover
* TEMP: degrees Celsius
* VIS: meters
* WINDDIR: degrees true
* WINDGUST: meters/sec
* WINDSPEED: meters/sec """,
    tags=['weather_forecast_info_queries'],
)
def wx_by_route_us_v1_wx_forecast_route_query_post(
    x_api_key: Optional[str] = Header(None, alias='x-api-key'), body: WxByRoute = ...
):
    """
    Retrieve forecast values along a route for all requested weather elements and time periods.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
